// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_test_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpTestApiClient is the client API for OcpTestApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpTestApiClient interface {
	// Возвращает список "тестов"
	ListTests(ctx context.Context, in *ListTestsRequest, opts ...grpc.CallOption) (*ListTestsResponse, error)
	// Возвращает описание "теста" по ее идентификатору
	DescribeTest(ctx context.Context, in *DescribeTestRequest, opts ...grpc.CallOption) (*DescribeTestResponse, error)
	// Создает новый "тест"
	CreateTest(ctx context.Context, in *CreateTestRequest, opts ...grpc.CallOption) (*CreateTestResponse, error)
	// Создает несколько "тестов"
	MultiCreateTest(ctx context.Context, in *MultiCreateTestRequest, opts ...grpc.CallOption) (*MultiCreateTestResponse, error)
	// Обновляет "тест" по идентификатору
	UpdateTest(ctx context.Context, in *UpdateTestRequest, opts ...grpc.CallOption) (*UpdateTestResponse, error)
	// Удаляет "тест" по идентификатору
	RemoveTest(ctx context.Context, in *RemoveTestRequest, opts ...grpc.CallOption) (*RemoveTestResponse, error)
}

type ocpTestApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpTestApiClient(cc grpc.ClientConnInterface) OcpTestApiClient {
	return &ocpTestApiClient{cc}
}

func (c *ocpTestApiClient) ListTests(ctx context.Context, in *ListTestsRequest, opts ...grpc.CallOption) (*ListTestsResponse, error) {
	out := new(ListTestsResponse)
	err := c.cc.Invoke(ctx, "/ocp.test.api.OcpTestApi/ListTests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTestApiClient) DescribeTest(ctx context.Context, in *DescribeTestRequest, opts ...grpc.CallOption) (*DescribeTestResponse, error) {
	out := new(DescribeTestResponse)
	err := c.cc.Invoke(ctx, "/ocp.test.api.OcpTestApi/DescribeTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTestApiClient) CreateTest(ctx context.Context, in *CreateTestRequest, opts ...grpc.CallOption) (*CreateTestResponse, error) {
	out := new(CreateTestResponse)
	err := c.cc.Invoke(ctx, "/ocp.test.api.OcpTestApi/CreateTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTestApiClient) MultiCreateTest(ctx context.Context, in *MultiCreateTestRequest, opts ...grpc.CallOption) (*MultiCreateTestResponse, error) {
	out := new(MultiCreateTestResponse)
	err := c.cc.Invoke(ctx, "/ocp.test.api.OcpTestApi/MultiCreateTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTestApiClient) UpdateTest(ctx context.Context, in *UpdateTestRequest, opts ...grpc.CallOption) (*UpdateTestResponse, error) {
	out := new(UpdateTestResponse)
	err := c.cc.Invoke(ctx, "/ocp.test.api.OcpTestApi/UpdateTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTestApiClient) RemoveTest(ctx context.Context, in *RemoveTestRequest, opts ...grpc.CallOption) (*RemoveTestResponse, error) {
	out := new(RemoveTestResponse)
	err := c.cc.Invoke(ctx, "/ocp.test.api.OcpTestApi/RemoveTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpTestApiServer is the server API for OcpTestApi service.
// All implementations must embed UnimplementedOcpTestApiServer
// for forward compatibility
type OcpTestApiServer interface {
	// Возвращает список "тестов"
	ListTests(context.Context, *ListTestsRequest) (*ListTestsResponse, error)
	// Возвращает описание "теста" по ее идентификатору
	DescribeTest(context.Context, *DescribeTestRequest) (*DescribeTestResponse, error)
	// Создает новый "тест"
	CreateTest(context.Context, *CreateTestRequest) (*CreateTestResponse, error)
	// Создает несколько "тестов"
	MultiCreateTest(context.Context, *MultiCreateTestRequest) (*MultiCreateTestResponse, error)
	// Обновляет "тест" по идентификатору
	UpdateTest(context.Context, *UpdateTestRequest) (*UpdateTestResponse, error)
	// Удаляет "тест" по идентификатору
	RemoveTest(context.Context, *RemoveTestRequest) (*RemoveTestResponse, error)
	mustEmbedUnimplementedOcpTestApiServer()
}

// UnimplementedOcpTestApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpTestApiServer struct {
}

func (UnimplementedOcpTestApiServer) ListTests(context.Context, *ListTestsRequest) (*ListTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTests not implemented")
}
func (UnimplementedOcpTestApiServer) DescribeTest(context.Context, *DescribeTestRequest) (*DescribeTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTest not implemented")
}
func (UnimplementedOcpTestApiServer) CreateTest(context.Context, *CreateTestRequest) (*CreateTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTest not implemented")
}
func (UnimplementedOcpTestApiServer) MultiCreateTest(context.Context, *MultiCreateTestRequest) (*MultiCreateTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateTest not implemented")
}
func (UnimplementedOcpTestApiServer) UpdateTest(context.Context, *UpdateTestRequest) (*UpdateTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTest not implemented")
}
func (UnimplementedOcpTestApiServer) RemoveTest(context.Context, *RemoveTestRequest) (*RemoveTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTest not implemented")
}
func (UnimplementedOcpTestApiServer) mustEmbedUnimplementedOcpTestApiServer() {}

// UnsafeOcpTestApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpTestApiServer will
// result in compilation errors.
type UnsafeOcpTestApiServer interface {
	mustEmbedUnimplementedOcpTestApiServer()
}

func RegisterOcpTestApiServer(s grpc.ServiceRegistrar, srv OcpTestApiServer) {
	s.RegisterService(&OcpTestApi_ServiceDesc, srv)
}

func _OcpTestApi_ListTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTestApiServer).ListTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.test.api.OcpTestApi/ListTests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTestApiServer).ListTests(ctx, req.(*ListTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTestApi_DescribeTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTestApiServer).DescribeTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.test.api.OcpTestApi/DescribeTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTestApiServer).DescribeTest(ctx, req.(*DescribeTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTestApi_CreateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTestApiServer).CreateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.test.api.OcpTestApi/CreateTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTestApiServer).CreateTest(ctx, req.(*CreateTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTestApi_MultiCreateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTestApiServer).MultiCreateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.test.api.OcpTestApi/MultiCreateTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTestApiServer).MultiCreateTest(ctx, req.(*MultiCreateTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTestApi_UpdateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTestApiServer).UpdateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.test.api.OcpTestApi/UpdateTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTestApiServer).UpdateTest(ctx, req.(*UpdateTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTestApi_RemoveTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTestApiServer).RemoveTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.test.api.OcpTestApi/RemoveTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTestApiServer).RemoveTest(ctx, req.(*RemoveTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpTestApi_ServiceDesc is the grpc.ServiceDesc for OcpTestApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpTestApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.test.api.OcpTestApi",
	HandlerType: (*OcpTestApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTests",
			Handler:    _OcpTestApi_ListTests_Handler,
		},
		{
			MethodName: "DescribeTest",
			Handler:    _OcpTestApi_DescribeTest_Handler,
		},
		{
			MethodName: "CreateTest",
			Handler:    _OcpTestApi_CreateTest_Handler,
		},
		{
			MethodName: "MultiCreateTest",
			Handler:    _OcpTestApi_MultiCreateTest_Handler,
		},
		{
			MethodName: "UpdateTest",
			Handler:    _OcpTestApi_UpdateTest_Handler,
		},
		{
			MethodName: "RemoveTest",
			Handler:    _OcpTestApi_RemoveTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-test-api/ocp-test-api.proto",
}
