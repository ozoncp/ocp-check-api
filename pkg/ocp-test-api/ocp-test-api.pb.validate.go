// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-test-api/ocp-test-api.proto

package ocp_test_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListTestsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListTestsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListTestsRequestValidationError is the validation error returned by
// ListTestsRequest.Validate if the designated constraints aren't met.
type ListTestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTestsRequestValidationError) ErrorName() string { return "ListTestsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTestsRequestValidationError{}

// Validate checks the field values on ListTestsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListTestsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTests() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTestsResponseValidationError{
					field:  fmt.Sprintf("Tests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListTestsResponseValidationError is the validation error returned by
// ListTestsResponse.Validate if the designated constraints aren't met.
type ListTestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTestsResponseValidationError) ErrorName() string {
	return "ListTestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTestsResponseValidationError{}

// Validate checks the field values on DescribeTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeTestRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTestId() <= 0 {
		return DescribeTestRequestValidationError{
			field:  "TestId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeTestRequestValidationError is the validation error returned by
// DescribeTestRequest.Validate if the designated constraints aren't met.
type DescribeTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTestRequestValidationError) ErrorName() string {
	return "DescribeTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTestRequestValidationError{}

// Validate checks the field values on DescribeTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeTestResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeTestResponseValidationError{
				field:  "Test",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeTestResponseValidationError is the validation error returned by
// DescribeTestResponse.Validate if the designated constraints aren't met.
type DescribeTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTestResponseValidationError) ErrorName() string {
	return "DescribeTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTestResponseValidationError{}

// Validate checks the field values on CreateTestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateTestRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TaskID

	// no validation rules for Input

	// no validation rules for Output

	return nil
}

// CreateTestRequestValidationError is the validation error returned by
// CreateTestRequest.Validate if the designated constraints aren't met.
type CreateTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTestRequestValidationError) ErrorName() string {
	return "CreateTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTestRequestValidationError{}

// Validate checks the field values on CreateTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTestResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TestId

	return nil
}

// CreateTestResponseValidationError is the validation error returned by
// CreateTestResponse.Validate if the designated constraints aren't met.
type CreateTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTestResponseValidationError) ErrorName() string {
	return "CreateTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTestResponseValidationError{}

// Validate checks the field values on MultiCreateTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateTestRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTests() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateTestRequestValidationError{
					field:  fmt.Sprintf("Tests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateTestRequestValidationError is the validation error returned by
// MultiCreateTestRequest.Validate if the designated constraints aren't met.
type MultiCreateTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateTestRequestValidationError) ErrorName() string {
	return "MultiCreateTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateTestRequestValidationError{}

// Validate checks the field values on MultiCreateTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateTestResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Created

	return nil
}

// MultiCreateTestResponseValidationError is the validation error returned by
// MultiCreateTestResponse.Validate if the designated constraints aren't met.
type MultiCreateTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateTestResponseValidationError) ErrorName() string {
	return "MultiCreateTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateTestResponseValidationError{}

// Validate checks the field values on UpdateTestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateTestRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTestRequestValidationError{
				field:  "Test",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateTestRequestValidationError is the validation error returned by
// UpdateTestRequest.Validate if the designated constraints aren't met.
type UpdateTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTestRequestValidationError) ErrorName() string {
	return "UpdateTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTestRequestValidationError{}

// Validate checks the field values on UpdateTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTestResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Updated

	return nil
}

// UpdateTestResponseValidationError is the validation error returned by
// UpdateTestResponse.Validate if the designated constraints aren't met.
type UpdateTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTestResponseValidationError) ErrorName() string {
	return "UpdateTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTestResponseValidationError{}

// Validate checks the field values on RemoveTestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveTestRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTestId() <= 0 {
		return RemoveTestRequestValidationError{
			field:  "TestId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveTestRequestValidationError is the validation error returned by
// RemoveTestRequest.Validate if the designated constraints aren't met.
type RemoveTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTestRequestValidationError) ErrorName() string {
	return "RemoveTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTestRequestValidationError{}

// Validate checks the field values on RemoveTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveTestResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Deleted

	return nil
}

// RemoveTestResponseValidationError is the validation error returned by
// RemoveTestResponse.Validate if the designated constraints aren't met.
type RemoveTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTestResponseValidationError) ErrorName() string {
	return "RemoveTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTestResponseValidationError{}

// Validate checks the field values on Test with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Test) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for TaskID

	// no validation rules for Input

	// no validation rules for Output

	return nil
}

// TestValidationError is the validation error returned by Test.Validate if the
// designated constraints aren't met.
type TestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestValidationError) ErrorName() string { return "TestValidationError" }

// Error satisfies the builtin error interface
func (e TestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestValidationError{}
