// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_check_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpCheckApiClient is the client API for OcpCheckApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpCheckApiClient interface {
	// Возвращает список "проверок"
	ListChecks(ctx context.Context, in *ListChecksRequest, opts ...grpc.CallOption) (*ListChecksResponse, error)
	// Возвращает описание "проверки" по ее идентификатору
	DescribeCheck(ctx context.Context, in *DescribeCheckRequest, opts ...grpc.CallOption) (*DescribeCheckResponse, error)
	// Создает новую "проверку"
	CreateCheck(ctx context.Context, in *CreateCheckRequest, opts ...grpc.CallOption) (*CreateCheckResponse, error)
	// Удаляет "проверку" по идентификатору
	RemoveCheck(ctx context.Context, in *RemoveCheckRequest, opts ...grpc.CallOption) (*RemoveCheckResponse, error)
}

type ocpCheckApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpCheckApiClient(cc grpc.ClientConnInterface) OcpCheckApiClient {
	return &ocpCheckApiClient{cc}
}

func (c *ocpCheckApiClient) ListChecks(ctx context.Context, in *ListChecksRequest, opts ...grpc.CallOption) (*ListChecksResponse, error) {
	out := new(ListChecksResponse)
	err := c.cc.Invoke(ctx, "/ocp.check.api.OcpCheckApi/ListChecks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpCheckApiClient) DescribeCheck(ctx context.Context, in *DescribeCheckRequest, opts ...grpc.CallOption) (*DescribeCheckResponse, error) {
	out := new(DescribeCheckResponse)
	err := c.cc.Invoke(ctx, "/ocp.check.api.OcpCheckApi/DescribeCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpCheckApiClient) CreateCheck(ctx context.Context, in *CreateCheckRequest, opts ...grpc.CallOption) (*CreateCheckResponse, error) {
	out := new(CreateCheckResponse)
	err := c.cc.Invoke(ctx, "/ocp.check.api.OcpCheckApi/CreateCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpCheckApiClient) RemoveCheck(ctx context.Context, in *RemoveCheckRequest, opts ...grpc.CallOption) (*RemoveCheckResponse, error) {
	out := new(RemoveCheckResponse)
	err := c.cc.Invoke(ctx, "/ocp.check.api.OcpCheckApi/RemoveCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpCheckApiServer is the server API for OcpCheckApi service.
// All implementations must embed UnimplementedOcpCheckApiServer
// for forward compatibility
type OcpCheckApiServer interface {
	// Возвращает список "проверок"
	ListChecks(context.Context, *ListChecksRequest) (*ListChecksResponse, error)
	// Возвращает описание "проверки" по ее идентификатору
	DescribeCheck(context.Context, *DescribeCheckRequest) (*DescribeCheckResponse, error)
	// Создает новую "проверку"
	CreateCheck(context.Context, *CreateCheckRequest) (*CreateCheckResponse, error)
	// Удаляет "проверку" по идентификатору
	RemoveCheck(context.Context, *RemoveCheckRequest) (*RemoveCheckResponse, error)
	mustEmbedUnimplementedOcpCheckApiServer()
}

// UnimplementedOcpCheckApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpCheckApiServer struct {
}

func (UnimplementedOcpCheckApiServer) ListChecks(context.Context, *ListChecksRequest) (*ListChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChecks not implemented")
}
func (UnimplementedOcpCheckApiServer) DescribeCheck(context.Context, *DescribeCheckRequest) (*DescribeCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCheck not implemented")
}
func (UnimplementedOcpCheckApiServer) CreateCheck(context.Context, *CreateCheckRequest) (*CreateCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheck not implemented")
}
func (UnimplementedOcpCheckApiServer) RemoveCheck(context.Context, *RemoveCheckRequest) (*RemoveCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCheck not implemented")
}
func (UnimplementedOcpCheckApiServer) mustEmbedUnimplementedOcpCheckApiServer() {}

// UnsafeOcpCheckApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpCheckApiServer will
// result in compilation errors.
type UnsafeOcpCheckApiServer interface {
	mustEmbedUnimplementedOcpCheckApiServer()
}

func RegisterOcpCheckApiServer(s grpc.ServiceRegistrar, srv OcpCheckApiServer) {
	s.RegisterService(&OcpCheckApi_ServiceDesc, srv)
}

func _OcpCheckApi_ListChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpCheckApiServer).ListChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.check.api.OcpCheckApi/ListChecks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpCheckApiServer).ListChecks(ctx, req.(*ListChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpCheckApi_DescribeCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpCheckApiServer).DescribeCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.check.api.OcpCheckApi/DescribeCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpCheckApiServer).DescribeCheck(ctx, req.(*DescribeCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpCheckApi_CreateCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpCheckApiServer).CreateCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.check.api.OcpCheckApi/CreateCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpCheckApiServer).CreateCheck(ctx, req.(*CreateCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpCheckApi_RemoveCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpCheckApiServer).RemoveCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.check.api.OcpCheckApi/RemoveCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpCheckApiServer).RemoveCheck(ctx, req.(*RemoveCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpCheckApi_ServiceDesc is the grpc.ServiceDesc for OcpCheckApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpCheckApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.check.api.OcpCheckApi",
	HandlerType: (*OcpCheckApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListChecks",
			Handler:    _OcpCheckApi_ListChecks_Handler,
		},
		{
			MethodName: "DescribeCheck",
			Handler:    _OcpCheckApi_DescribeCheck_Handler,
		},
		{
			MethodName: "CreateCheck",
			Handler:    _OcpCheckApi_CreateCheck_Handler,
		},
		{
			MethodName: "RemoveCheck",
			Handler:    _OcpCheckApi_RemoveCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-check-api/ocp-check-api.proto",
}
