// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-check-api/ocp-check-api.proto

package ocp_check_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListChecksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListChecksRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListChecksRequestValidationError is the validation error returned by
// ListChecksRequest.Validate if the designated constraints aren't met.
type ListChecksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChecksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChecksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChecksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChecksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChecksRequestValidationError) ErrorName() string {
	return "ListChecksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListChecksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChecksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChecksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChecksRequestValidationError{}

// Validate checks the field values on ListChecksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListChecksResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetChecks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChecksResponseValidationError{
					field:  fmt.Sprintf("Checks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListChecksResponseValidationError is the validation error returned by
// ListChecksResponse.Validate if the designated constraints aren't met.
type ListChecksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChecksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChecksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChecksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChecksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChecksResponseValidationError) ErrorName() string {
	return "ListChecksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListChecksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChecksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChecksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChecksResponseValidationError{}

// Validate checks the field values on CreateCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCheckRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SolutionID

	// no validation rules for TestID

	// no validation rules for RunnerID

	// no validation rules for Success

	return nil
}

// CreateCheckRequestValidationError is the validation error returned by
// CreateCheckRequest.Validate if the designated constraints aren't met.
type CreateCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCheckRequestValidationError) ErrorName() string {
	return "CreateCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCheckRequestValidationError{}

// Validate checks the field values on CreateCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCheckResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CheckId

	return nil
}

// CreateCheckResponseValidationError is the validation error returned by
// CreateCheckResponse.Validate if the designated constraints aren't met.
type CreateCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCheckResponseValidationError) ErrorName() string {
	return "CreateCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCheckResponseValidationError{}

// Validate checks the field values on RemoveCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveCheckRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCheckId() <= 0 {
		return RemoveCheckRequestValidationError{
			field:  "CheckId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveCheckRequestValidationError is the validation error returned by
// RemoveCheckRequest.Validate if the designated constraints aren't met.
type RemoveCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCheckRequestValidationError) ErrorName() string {
	return "RemoveCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCheckRequestValidationError{}

// Validate checks the field values on RemoveCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveCheckResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemoveCheckResponseValidationError is the validation error returned by
// RemoveCheckResponse.Validate if the designated constraints aren't met.
type RemoveCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCheckResponseValidationError) ErrorName() string {
	return "RemoveCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCheckResponseValidationError{}

// Validate checks the field values on DescribeCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeCheckRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCheckId() == 0 {
		return DescribeCheckRequestValidationError{
			field:  "CheckId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeCheckRequestValidationError is the validation error returned by
// DescribeCheckRequest.Validate if the designated constraints aren't met.
type DescribeCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCheckRequestValidationError) ErrorName() string {
	return "DescribeCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCheckRequestValidationError{}

// Validate checks the field values on DescribeCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeCheckResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCheck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeCheckResponseValidationError{
				field:  "Check",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeCheckResponseValidationError is the validation error returned by
// DescribeCheckResponse.Validate if the designated constraints aren't met.
type DescribeCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCheckResponseValidationError) ErrorName() string {
	return "DescribeCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCheckResponseValidationError{}

// Validate checks the field values on Check with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Check) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for SolutionID

	// no validation rules for TestID

	// no validation rules for RunnerID

	// no validation rules for Success

	return nil
}

// CheckValidationError is the validation error returned by Check.Validate if
// the designated constraints aren't met.
type CheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckValidationError) ErrorName() string { return "CheckValidationError" }

// Error satisfies the builtin error interface
func (e CheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckValidationError{}
